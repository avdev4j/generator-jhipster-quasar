<template>
  <q-page class="q-pa-md flex flex-center">
    <q-form
      @submit="onSubmit"
      class="q-gutter-md"
      style="min-width: 300px"
    >
      <q-input
        v-model="account.data.login"
        :label="$t('userManagement.login')"
        lazy-rules
        :rules="[$rules.required(), $rules.maxLength(50)]"
      />
      <q-input
        v-model="account.data.firstName"
        :label="$t('userManagement.firstName')"
        lazy-rules
        :rules="[$rules.maxLength(50)]"
      />
      <q-input
        v-model="account.data.lastName"
        :label="$t('userManagement.lastName')"
        lazy-rules
        :rules="[$rules.maxLength(50)]"
      />
      <q-input
        v-model="account.data.email"
        type="email"
        :label="$t('userManagement.email')"
        lazy-rules
        :rules="[$rules.required(), $rules.minLength(5), $rules.maxLength(254)]"
      />
      <q-select
        v-model="account.data.langKey"
        :options="langObjects"
        option-value="key"
        option-label="value"
        emit-value
        map-options
        :label="$t('userManagement.langKey')"
        :rules="[$rules.required()]"
      />
      <q-select
        v-model="account.data.authorities"
        :options="availableRoles"
        :label="$t('userManagement.profiles')"
        multiple
      >
        <template v-slot:option="{ itemProps, opt, selected, toggleOption }">
          <q-item v-bind="itemProps">
            <q-item-section>
              <q-item-label v-html="opt"></q-item-label>
            </q-item-section>
            <q-item-section side>
              <q-toggle
                :model-value="selected"
                @update:modelValue="toggleOption(opt)"
              />
            </q-item-section>
          </q-item>
        </template>
      </q-select>
      <div class="flex justify-between">
        <q-btn
          type="submit"
          color="primary"
          :label="$t('entity.action.save')"
        />
        <q-btn
          to="/users"
          flat
          color="primary"
          :label="$t('entity.action.back')"
        />
      </div>
    </q-form>
  </q-page>
</template>

<script>
import { api } from 'boot/axios';
import { useQuasar } from 'quasar';
import { defineComponent, reactive } from 'vue';
import { useI18n } from 'vue-i18n';
import { useRoute, useRouter } from 'vue-router';
import { langObjects } from '../constants/i18nConstants';

export default defineComponent({
  name: 'PageUser',

  setup() {
    const { t } = useI18n();
    const $q = useQuasar();
    const router = useRouter();
    const route = useRoute();

    const account = reactive({
      data: {
        id: null,
        login: null,
        firstName: null,
        lastName: null,
        email: null,
        langKey: null,
        authorities: null,
      },
    });

    const fetchUser = async () => {
      if (route.params.login) {
        account.data = (await api.get(`/api/admin/users/${route.params.login}`)).data;
      }
    };

    fetchUser();

    const onSubmit = async () => {
      try {
        await api({
          method: account.data.id ? 'put' : 'post',
          url: '/api/admin/users',
          data: account.data,
        });
        router.push('/users');
      } catch (e) {
        $q.notify({
          type: 'negative',
          message: t(e.response.data.message),
        });
      }
    };

    return {
      account,
      langObjects,
      availableRoles: ['ROLE_ADMIN', 'ROLE_USER'],
      onSubmit,
    };
  },
});
</script>
